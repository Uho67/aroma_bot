const { PrismaClient } = require('@prisma/client');
const BroadcastService = require('../broadcast/broadcast.service');
const { bot } = require('../telegram/bot.service');
const AttentionCheckerService = require('./attention-checker.service');

const prisma = new PrismaClient();
const broadcastService = new BroadcastService();
const attentionChecker = new AttentionCheckerService();

class PostQueueProcessorService {
  constructor() {
    this.isRunning = false;
  }

  async processPostQueue() {
    if (this.isRunning) {
      console.log('Post queue processor already running, skipping...');
      return;
    }

    this.isRunning = true;
    console.log('üöÄ Starting post queue processing...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º 100 –∑–∞–ø–∏—Å–µ–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å—Ç–æ–≤ (–±–µ–∑ include)
      const queueItems = await prisma.postQueue.findMany({
        take: 100,
        orderBy: { createdAt: 'asc' }
      });

      console.log(` Found ${queueItems.length} items in post queue`);

      if (queueItems.length === 0) {
        console.log('‚úÖ No posts in queue to process');
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
      queueItems.forEach((item, index) => {
        console.log(` Queue item ${index + 1}: Post ID: ${item.post_id}, User ID: ${item.user_id}, Created: ${item.createdAt}`);
      });

      let processedCount = 0;
      const errors = [];

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ post_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const postsByUser = {};
      queueItems.forEach(item => {
        if (!postsByUser[item.post_id]) {
          postsByUser[item.post_id] = [];
        }
        postsByUser[item.post_id].push(item.user_id);
      });

      console.log(`üìã Grouped posts:`, postsByUser);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã –≥—Ä—É–ø–ø–∞–º–∏
      for (const [postId, userIds] of Object.entries(postsByUser)) {
        try {
          console.log(` Processing post ${postId} for ${userIds.length} users`);

          // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
          const post = await prisma.post.findUnique({
            where: { id: parseInt(postId) }
          });

          if (!post) {
            console.log(`‚ùå Post ${postId} not found, skipping...`);
            continue;
          }

          console.log(` Post found:`, { id: post.id, description: post.description?.substring(0, 50) + '...' });

          // –ü–æ–ª—É—á–∞–µ–º chat_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ user_id
          const users = await prisma.user.findMany({
            where: { id: { in: userIds } },
            select: { chat_id: true }
          });

          const chatIds = users.map(user => user.chat_id);
          console.log(` Chat IDs for users:`, chatIds);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –∏–∑ broadcastService
          console.log(` Attempting to send post ${postId} to users:`, chatIds);

          // –ü–µ—Ä–µ–¥–∞–µ–º bot –Ω–∞–ø—Ä—è–º—É—é
          const sendResults = await broadcastService.sendPostToUsers(post, chatIds, broadcastService.buttonsService, bot);

          console.log(` Sent post ${postId} to ${sendResults.sentCount} users`);
          console.log(`üìä Send results:`, sendResults);

          if (sendResults.errors.length > 0) {
            console.log(`‚ö†Ô∏è Errors sending post ${postId}:`, sendResults.errors);
          }

          // Reset attention_needed for users who successfully received the post
          if (sendResults.sentCount > 0) {
            try {
              const successfulChatIds = sendResults.results
                .filter(r => r.success)
                .map(r => r.chatId);

              if (successfulChatIds.length > 0) {
                await attentionChecker.resetUserAttentionByChatIds(successfulChatIds);
                console.log(`‚úÖ Reset attention_needed for ${successfulChatIds.length} users after sending post ${postId}`);
              }
            } catch (resetError) {
              console.error('‚ùå Error resetting attention_needed after post sending:', resetError);
              // Don't block the main process due to attention reset error
            }
          }

          // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
          const deletedCount = await prisma.postQueue.deleteMany({
            where: {
              AND: [
                { post_id: parseInt(postId) },
                { user_id: { in: userIds } }
              ]
            }
          });

          console.log(`Ô∏è Deleted ${deletedCount.count} processed items from queue for post ${postId}`);

          processedCount += sendResults.sentCount;
          errors.push(...sendResults.errors);

        } catch (error) {
          console.error(`‚ùå Error processing post ${postId}:`, error);
          console.error(`‚ùå Error stack:`, error.stack);
          errors.push({ postId, error: error.message });
        }
      }

      console.log(`üéâ Post queue processing completed. Processed ${processedCount} items`);

      if (errors.length > 0) {
        console.log('‚ö†Ô∏è Errors encountered:', errors);
      }

    } catch (error) {
      console.error('üí• Error in post queue processing:', error);
      console.error('üí• Error stack:', error.stack);
    } finally {
      this.isRunning = false;
      console.log('üèÅ Post queue processor finished');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
  async getQueueStats() {
    try {
      const totalItems = await prisma.postQueue.count();
      const oldestItem = await prisma.postQueue.findFirst({
        orderBy: { createdAt: 'asc' }
      });
      const newestItem = await prisma.postQueue.findFirst({
        orderBy: { createdAt: 'desc' }
      });

      return {
        totalItems,
        oldestItem: oldestItem?.createdAt || null,
        newestItem: newestItem?.createdAt || null
      };
    } catch (error) {
      console.error('Error getting post queue stats:', error);
      return null;
    }
  }
}

module.exports = PostQueueProcessorService;
